use rkyv::{Archive, Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Archive)]
pub struct ErrorWarning {
    pub header: crate::std_msgs::msg::Header,
    pub ibeo_header: crate::ibeo_msgs::msg::IbeoDataHeader,
    pub err_internal_error: bool,
    pub err_motor_1_fault: bool,
    pub err_buffer_error_xmt_incomplete: bool,
    pub err_buffer_error_overflow: bool,
    pub err_apd_over_temperature: bool,
    pub err_apd_under_temperature: bool,
    pub err_apd_temperature_sensor_defect: bool,
    pub err_motor_2_fault: bool,
    pub err_motor_3_fault: bool,
    pub err_motor_4_fault: bool,
    pub err_motor_5_fault: bool,
    pub err_int_no_scan_data: bool,
    pub err_int_communication_error: bool,
    pub err_int_incorrect_scan_data: bool,
    pub err_config_fpga_not_configurable: bool,
    pub err_config_incorrect_config_data: bool,
    pub err_config_contains_incorrect_params: bool,
    pub err_timeout_data_processing: bool,
    pub err_timeout_env_model_computation_reset: bool,
    pub wrn_int_communication_error: bool,
    pub wrn_low_temperature: bool,
    pub wrn_high_temperature: bool,
    pub wrn_int_motor_1: bool,
    pub wrn_sync_error: bool,
    pub wrn_laser_1_start_pulse_missing: bool,
    pub wrn_laser_2_start_pulse_missing: bool,
    pub wrn_can_interface_blocked: bool,
    pub wrn_eth_interface_blocked: bool,
    pub wrn_incorrect_can_data_rcvd: bool,
    pub wrn_int_incorrect_scan_data: bool,
    pub wrn_eth_unkwn_incomplete_data: bool,
    pub wrn_incorrect_or_forbidden_cmd_rcvd: bool,
    pub wrn_memory_access_failure: bool,
    pub wrn_int_overflow: bool,
    pub wrn_ego_motion_data_missing: bool,
    pub wrn_incorrect_mounting_params: bool,
    pub wrn_no_obj_comp_due_to_scan_freq: bool,
}

impl Default for ErrorWarning {
    fn default() -> Self {
        ErrorWarning {
            header: crate::std_msgs::msg::Header::default(),
            ibeo_header: crate::ibeo_msgs::msg::IbeoDataHeader::default(),
            err_internal_error: false,
            err_motor_1_fault: false,
            err_buffer_error_xmt_incomplete: false,
            err_buffer_error_overflow: false,
            err_apd_over_temperature: false,
            err_apd_under_temperature: false,
            err_apd_temperature_sensor_defect: false,
            err_motor_2_fault: false,
            err_motor_3_fault: false,
            err_motor_4_fault: false,
            err_motor_5_fault: false,
            err_int_no_scan_data: false,
            err_int_communication_error: false,
            err_int_incorrect_scan_data: false,
            err_config_fpga_not_configurable: false,
            err_config_incorrect_config_data: false,
            err_config_contains_incorrect_params: false,
            err_timeout_data_processing: false,
            err_timeout_env_model_computation_reset: false,
            wrn_int_communication_error: false,
            wrn_low_temperature: false,
            wrn_high_temperature: false,
            wrn_int_motor_1: false,
            wrn_sync_error: false,
            wrn_laser_1_start_pulse_missing: false,
            wrn_laser_2_start_pulse_missing: false,
            wrn_can_interface_blocked: false,
            wrn_eth_interface_blocked: false,
            wrn_incorrect_can_data_rcvd: false,
            wrn_int_incorrect_scan_data: false,
            wrn_eth_unkwn_incomplete_data: false,
            wrn_incorrect_or_forbidden_cmd_rcvd: false,
            wrn_memory_access_failure: false,
            wrn_int_overflow: false,
            wrn_ego_motion_data_missing: false,
            wrn_incorrect_mounting_params: false,
            wrn_no_obj_comp_due_to_scan_freq: false,
        }
    }
}
