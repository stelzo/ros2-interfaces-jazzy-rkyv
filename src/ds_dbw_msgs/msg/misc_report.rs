use rkyv::{Archive, Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Archive)]
pub struct MiscReport {
    pub header: crate::std_msgs::msg::Header,
    pub parking_brake: crate::ds_dbw_msgs::msg::PrkBrkStat,
    pub passenger_detect: bool,
    pub passenger_airbag: bool,
    pub buckle_driver: bool,
    pub buckle_passenger: bool,
    pub door_driver: bool,
    pub door_passenger: bool,
    pub door_rear_left: bool,
    pub door_rear_right: bool,
    pub door_hood: bool,
    pub door_trunk: bool,
    pub btn_ld_ok: bool,
    pub btn_ld_up: bool,
    pub btn_ld_down: bool,
    pub btn_ld_left: bool,
    pub btn_ld_right: bool,
    pub btn_rd_ok: bool,
    pub btn_rd_up: bool,
    pub btn_rd_down: bool,
    pub btn_rd_left: bool,
    pub btn_rd_right: bool,
    pub btn_cc_mode: bool,
    pub btn_cc_on: bool,
    pub btn_cc_off: bool,
    pub btn_cc_res: bool,
    pub btn_cc_cncl: bool,
    pub btn_cc_on_off: bool,
    pub btn_cc_res_cncl: bool,
    pub btn_cc_res_inc: bool,
    pub btn_cc_res_dec: bool,
    pub btn_cc_set_inc: bool,
    pub btn_cc_set_dec: bool,
    pub btn_acc_gap_inc: bool,
    pub btn_acc_gap_dec: bool,
    pub btn_limit_on_off: bool,
    pub btn_la_on_off: bool,
    pub btn_apa: bool,
    pub btn_media: bool,
    pub btn_vol_inc: bool,
    pub btn_vol_dec: bool,
    pub btn_mute: bool,
    pub btn_speak: bool,
    pub btn_prev: bool,
    pub btn_next: bool,
    pub btn_call_start: bool,
    pub btn_call_end: bool,
    pub wiper: crate::ds_dbw_msgs::msg::Wiper,
    pub headlight_low: bool,
    pub headlight_high: bool,
    pub headlight_low_control: crate::ds_dbw_msgs::msg::HeadlightCtrlLow,
    pub headlight_high_control: crate::ds_dbw_msgs::msg::HeadlightCtrlHigh,
    pub ambient_light: crate::ds_dbw_msgs::msg::AmbientLight,
    pub outside_air_temp: f32,
}

impl Default for MiscReport {
    fn default() -> Self {
        MiscReport {
            header: crate::std_msgs::msg::Header::default(),
            parking_brake: crate::ds_dbw_msgs::msg::PrkBrkStat::default(),
            passenger_detect: false,
            passenger_airbag: false,
            buckle_driver: false,
            buckle_passenger: false,
            door_driver: false,
            door_passenger: false,
            door_rear_left: false,
            door_rear_right: false,
            door_hood: false,
            door_trunk: false,
            btn_ld_ok: false,
            btn_ld_up: false,
            btn_ld_down: false,
            btn_ld_left: false,
            btn_ld_right: false,
            btn_rd_ok: false,
            btn_rd_up: false,
            btn_rd_down: false,
            btn_rd_left: false,
            btn_rd_right: false,
            btn_cc_mode: false,
            btn_cc_on: false,
            btn_cc_off: false,
            btn_cc_res: false,
            btn_cc_cncl: false,
            btn_cc_on_off: false,
            btn_cc_res_cncl: false,
            btn_cc_res_inc: false,
            btn_cc_res_dec: false,
            btn_cc_set_inc: false,
            btn_cc_set_dec: false,
            btn_acc_gap_inc: false,
            btn_acc_gap_dec: false,
            btn_limit_on_off: false,
            btn_la_on_off: false,
            btn_apa: false,
            btn_media: false,
            btn_vol_inc: false,
            btn_vol_dec: false,
            btn_mute: false,
            btn_speak: false,
            btn_prev: false,
            btn_next: false,
            btn_call_start: false,
            btn_call_end: false,
            wiper: crate::ds_dbw_msgs::msg::Wiper::default(),
            headlight_low: false,
            headlight_high: false,
            headlight_low_control: crate::ds_dbw_msgs::msg::HeadlightCtrlLow::default(),
            headlight_high_control: crate::ds_dbw_msgs::msg::HeadlightCtrlHigh::default(),
            ambient_light: crate::ds_dbw_msgs::msg::AmbientLight::default(),
            outside_air_temp: 0.0,
        }
    }
}
